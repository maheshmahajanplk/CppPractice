http://www.csl.mtu.edu/cs4411.ck/www/NOTES/process/shm/example-2.html
-------------------------------------------------------------------------------------------

Communicating Between Two Separate Processes

In this example, the server and client are separate processes. First, a naive communication scheme through a shared memory is established. The shared memory consists of one status variable status and an array of four integers. Variable status has value NOT_READY if the data area has not yet been filled with data, FILLED if the server has filled data in the shared memory, and TAKEN if the client has taken the data in the shared memory. The definitions are shown below. Click here to download this file (shm-02.h).

    #define  NOT_READY  -1
    #define  FILLED     0
    #define  TAKEN      1

    struct Memory {
         int  status;
         int  data[4];
    };

Assume that the server and client are in the current directory. The server uses ftok() to generate a key and uses it for requesting a shared memory. Before the shared memory is filled with data, status is set to NOT_READY. After the shared memory is filled, the server sets status to FILLED. Then, the server waits until status becomes TAKEN, meaning that the client has taken the data.

The following is the server program. Click here to download a copy of this server program server.c.

    #include  <stdio.h>
    #include  <stdlib.h>
    #include  <sys/types.h>
    #include  <sys/ipc.h>
    #include  <sys/shm.h>

    #include  "shm-02.h"

    void  main(int  argc, char *argv[])
    {
         key_t          ShmKEY;
         int            ShmID;
         struct Memory  *ShmPTR;

         if (argc != 5) {
              printf("Use: %s #1 #2 #3 #4\n", argv[0]);
              exit(1);
         }

         ShmKEY = ftok(".", 'x');
         ShmID = shmget(ShmKEY, sizeof(struct Memory), IPC_CREAT | 0666);
         if (ShmID < 0) {
              printf("*** shmget error (server) ***\n");
              exit(1);
         }
         printf("Server has received a shared memory of four integers...\n");

         ShmPTR = (struct Memory *) shmat(ShmID, NULL, 0);
         if ((int) ShmPTR == -1) {
              printf("*** shmat error (server) ***\n");
              exit(1);
         }
         printf("Server has attached the shared memory...\n");

         ShmPTR->status  = NOT_READY;
         ShmPTR->data[0] = atoi(argv[1]);
         ShmPTR->data[1] = atoi(argv[2]);
         ShmPTR->data[2] = atoi(argv[3]);
         ShmPTR->data[3] = atoi(argv[4]);
         printf("Server has filled %d %d %d %d to shared memory...\n",
                ShmPTR->data[0], ShmPTR->data[1], 
                ShmPTR->data[2], ShmPTR->data[3]);
         ShmPTR->status = FILLED;

         printf("Please start the client in another window...\n");

         while (ShmPTR->status != TAKEN)
              sleep(1);

         printf("Server has detected the completion of its child...\n");
         shmdt((void *) ShmPTR);
         printf("Server has detached its shared memory...\n");
         shmctl(ShmID, IPC_RMID, NULL);
         printf("Server has removed its shared memory...\n");
         printf("Server exits...\n");
         exit(0);
    }

The client part is similar to the server. It waits until status is FILLED. Then, the clients retrieves the data and sets status to TAKEN, informing the server that data have been taken. The following is the client program. Click here to download a copy of this server program client.c.

    #include  <stdio.h>
    #include  <stdlib.h>
    #include  <sys/types.h>
    #include  <sys/ipc.h>
    #include  <sys/shm.h>

    #include  "shm-02.h"

    void  main(void)
    {
         key_t          ShmKEY;
         int            ShmID;
         struct Memory  *ShmPTR;

         ShmKEY = ftok(".", 'x');
         ShmID = shmget(ShmKEY, sizeof(struct Memory), 0666);
         if (ShmID < 0) {
              printf("*** shmget error (client) ***\n");
              exit(1);
         }
         printf("   Client has received a shared memory of four integers...\n");

         ShmPTR = (struct Memory *) shmat(ShmID, NULL, 0);
         if ((int) ShmPTR == -1) {
              printf("*** shmat error (client) ***\n");
              exit(1);
         }
         printf("   Client has attached the shared memory...\n");

         while (ShmPTR->status != FILLED)
              ;
         printf("   Client found the data is ready...\n");
         printf("   Client found %d %d %d %d in shared memory...\n",
                    ShmPTR->data[0], ShmPTR->data[1], 
                    ShmPTR->data[2], ShmPTR->data[3]);

         ShmPTR->status = TAKEN;
         printf("   Client has informed server data have been taken...\n");
         shmdt((void *) ShmPTR);
         printf("   Client has detached its shared memory...\n");
         printf("   Client exits...\n");
         exit(0);
    }

Since the server program must allocate a shared memory segment to be used by the client, the server must run before running the client. One way to do this is that start the server in a window and then move to a second window to start the client. 

