source: https://github.com/hailinzeng/Programming-POSIX-Threads/

These are the source files for the programming examples in
"Programming With POSIX(r) Threads". The Makefile is pre-configured
for Digital UNIX, but includes the appropriate definitions to build on
Solaris (uncomment the Solaris lines and comment the Digital UNIX
lines).

1  alarm.c				Simple synchronous alarm clock
2  alarm_cond.c			Threaded alarm clock using condition variable
3  alarm_fork.c			Alarm clock using fork asychrony
4  alarm_mutex.c		Threaded alarm clock using mutex
5  alarm_thread.c		Alarm clock using thread asynchrony
6  atfork.c			Demonstrate pthread_atfork()
7  backoff.c			Demonstrate mutex hierarchy backoff
8  barrier.c			Implementation of barrier package
9  barrier_main.c		Demonstrate use of barrier package
10 cancel.c			Demonstrate cancellation
11 cancel_async.c		Demonstrate asyncronous cancellation
12 cancel_cleanup.c		Demonstrate cancellation cleanup
13 cancel_disable.c		Demonstrate disabling cancellation
14 cancel_subcontract.c		Demonstrate cancellation of "subcontractors"
15 cond.c			Demonstrate use of condition variables
16 cond_attr.c			Demonstrate condition variable attributes
17 cond_dynamic.c		Demonstrate dynamic init of condition variable
18 cond_static.c		Demonstrate static init of condition variable
19 crew.c			A simple threaded work crew
20 flock.c			Demonstrate use of file locking
21 getlogin.c			Demonstrate reentrant user functions
22 hello.c			Demonstrate thread creation
23 inertia.c			Demonstrate "thread inertia" errors
24 lifecycle.c			Demonstrate "thread lifecycle"
25 mutex_attr.c			Demonstrate mutex attributes
26 mutex_dynamic.c		Demonstrate dynamic initialization of mutex
27 mutex_static.c		Demonstrate static initialization of mutex
28 once.c			Demonstrate use of pthread_once()
29 pipe.c			A simple threaded pipeline
30 putchar.c			Demonstrate thread-safe use of putchar()
31 rwlock.c			Implementation of read/write lock package
32 rwlock_main.c		Demonstrate use of read/write lock package
33 rwlock_try_main.c		Demonstrate use of read/write lock package
34 sched_attr.c			Demonstrate thread scheduling attributes
35 sched_thread.c		Demonstrate use of thread scheduling functions
36 semaphore_signal.c		Demonstrate use of semaphores with signals
37 semaphore_wait.c		Demonstrate use of semaphores
38 server.c			A simple threaded client/server program
39 sigev_thread.c		Demonstrate use of SIGEV_THREAD mechanism
40 sigwait.c			Demonstrate use of sigwait()
41 susp.c			Demonstrate use of pthread_kill()
42 thread.c			Demonstrate simple concurrent I/O
43 thread_attr.c		Demonstrate thread attributes
44 thread_error.c		Demonstrate POSIX thread error mechanism
45 trylock.c			Demonstrate use of pthread_mutex_trylock()
46 tsd_destructor.c		Demonstrate thread-specific data destructors
47 tsd_once.c			Demonstrate thread-specific data key creation
48 workq.c			Implementation of work queue package
49 workq_main.c			Demonstrate use of work queue package

Header files:

barrier.h			Definitions for barrier package
errors.h			General headers and error macros
rwlock.h			Definitions for read/write lock package
workq.h				Definitions for work queue package

Programs with arguments or special behavior:

alarm, alarm_fork,		The alarm programs will prompt for
alarm_thread, alarm_mutex,	commands until terminated by ^D
alarm_cond			(EOF). Commands are "<n> <s>" where <s>
				(the remainder of the line) is a
				message to print after <n> seconds.
atfork [hang]			Run with an argument of 0 to omit
				atfork handlers -- program will hang.
backoff [backoff [delay]]	Run with first argument of 0, will not
				back off on mutex collision, and will
				usually hang. Second argument can be
				specified greater than 0 to yield
				(increasing chances of hang on
				uniprocessor), or less than 0 to sleep
				for a second.
crew string path		First argument is a search string,
				second is a file path.
flock				Threads will prompt alternately for
				input.
pipe				Prompts for integers to feed to
				pipeline; enter "=" to pop a result.
putchar [unsync]		Run with argument of 0 to concurrently
				call putchar_unlocked from multiple
				threads.
server				Threads each prompt for input, and
				echo it 3 times -- server prevents
				output while waiting for input.
sigwait				Waits for 5 SIGINT signals (^C)
thread				One thread writes to stdout while
				another waits for input from
				stdin. (Satisfy the read to exit.)

/---[ Dave Butenhof ]-----------------------[ butenhof@zko.dec.com ]---\
| Digital Equipment Corporation           110 Spit Brook Rd ZKO2-3/Q18 |
| 603.881.2218, FAX 603.881.0120                  Nashua NH 03062-2698 |
\-----------------[ Better Living Through Concurrency ]----------------/

